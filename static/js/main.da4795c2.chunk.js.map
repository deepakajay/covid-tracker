{"version":3,"sources":["InfoBox.js","util.js","Table.js","LineGraph.js","Map.js","App.js","index.js"],"names":["InfoBox","title","cases","total","active","isRed","props","console","log","Card","onClick","className","CardContent","Typography","color","gutterBottom","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","Table","countries","map","country","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","casesType","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","Map","center","zoom","TileLayer","url","attribution","Circle","countryInfo","lat","long","fillColor","fillOpacity","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","App","setInputCountry","setCountryInfo","setCountries","setCasesType","tableData","setTableData","mapCountries","setMapCountries","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","name","iso2","getCountriesData","onCountryChange","e","countryCode","target","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sXA6BeA,MAzBf,YAAoE,IAAjDC,EAAgD,EAAhDA,MAAOC,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,MAAUC,EAAS,0DAEjE,OADAC,QAAQC,IAAIP,EAAOG,GAEjB,kBAACK,EAAA,EAAD,CACEC,QAASJ,EAAMI,QACfC,UAAS,kBAAaP,GAAU,oBAAvB,YACPC,GAAS,iBAGX,kBAACO,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAC3Cd,GAEH,wBAAIU,UAAS,0BAAqBN,GAAS,0BACxCH,GAGH,kBAACW,EAAA,EAAD,CAAYF,UAAU,iBAAiBG,MAAM,iBAC1CX,EADH,a,2CCjBFa,EAAkB,CACtBd,MAAO,CACLe,IAAK,UACLC,IAAK,mBACLC,QAAS,yBACTC,WAAY,KAEdC,UAAW,CACTJ,IAAK,UACLC,IAAK,oBACLC,QAAS,0BACTC,WAAY,MAEdE,OAAQ,CACNL,IAAK,UACLC,IAAK,mBACLC,QAAS,yBACTC,WAAY,MAIHG,EAAW,SAACC,GACvB,IAAIC,EAAU,YAAOD,GAQrB,OAPAC,EAAWC,MAAK,SAACC,EAAGC,GAClB,OAAID,EAAEzB,MAAQ0B,EAAE1B,OACN,EAED,KAGJuB,GAGII,EAAkB,SAACC,GAAD,OAC7BA,EAAI,WAAOC,IAAQD,GAAME,OAAO,SAAY,M,OCnB/BC,MAff,YAA+B,IAAdC,EAAa,EAAbA,UACf,OACE,yBAAKvB,UAAU,SACZuB,EAAUC,KAAI,SAACC,GAAD,OACb,4BACE,4BAAKA,EAAQA,SACb,4BACE,gCAASL,IAAQK,EAAQlC,OAAO8B,OAAO,e,QCP7CK,EAAU,CACdC,OAAQ,CACNC,SAAS,GAEXC,SAAU,CACRC,MAAO,CACLC,OAAQ,IAGZC,qBAAqB,EACrBC,SAAU,CACRC,KAAM,QACNC,WAAW,EACXC,UAAW,CACTC,MAAO,SAAUC,EAAazB,GAC5B,OAAOO,IAAQkB,EAAYC,OAAOlB,OAAO,WAI/CmB,OAAQ,CACNC,MAAO,CACL,CACEC,KAAM,OACNC,KAAM,CACJtB,OAAQ,WACRuB,cAAe,QAIrBC,MAAO,CACL,CACEC,UAAW,CACTlB,SAAS,GAEXmB,MAAO,CAELC,SAAU,SAAUT,EAAOU,EAAOC,GAChC,OAAO9B,IAAQmB,GAAOlB,OAAO,YAQnC8B,EAAiB,SAACtC,EAAMuC,GAC5B,IACIC,EADAC,EAAY,GAEhB,IAAK,IAAIC,KAAQ1C,EAAKtB,MAAO,CAC3B,GAAI8D,EAAe,CACjB,IAAIG,EAAe,CACjBC,EAAGF,EACHG,EAAG7C,EAAKuC,GAAWG,GAAQF,GAE7BC,EAAUK,KAAKH,GAEjBH,EAAgBxC,EAAKuC,GAAWG,GAElC,OAAOD,GA2CMM,MAxCf,YAAmC,IAAdR,EAAa,EAAbA,UAAa,EACRS,mBAAS,IADD,mBACzBhD,EADyB,KACnBiD,EADmB,KAoBhC,OAjBAC,qBAAU,YACO,uCAAG,sBAAA/C,EAAA,sEACVgD,MAAM,8DACTC,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACpD,GACL,IAAIyC,EAAYH,EAAetC,EAAMuC,GACrCU,EAAQR,GACR1D,QAAQC,IAAIyD,MARA,2CAAH,qDAafc,KACC,CAAChB,IAGF,8BACO,OAAJvC,QAAI,IAAJA,OAAA,EAAAA,EAAMwD,QAAS,GACd,kBAAC,IAAD,CACExD,KAAM,CACJyD,SAAU,CACR,CACEC,gBAAiB,yBACjBC,YAAa,UACb3D,KAAMA,KAIZa,QAASA,M,yBC/EJ+C,MAdf,YAAsD,IAAvClD,EAAsC,EAAtCA,UAAW6B,EAA2B,EAA3BA,UAAWsB,EAAgB,EAAhBA,OAAQC,EAAQ,EAARA,KAC3C,OACE,yBAAK3E,UAAU,OACb,kBAAC,IAAD,CAAY0E,OAAQA,EAAQC,KAAMA,GAChC,kBAACC,EAAA,EAAD,CACEC,IAAI,qDACJC,YAAY,2EH6BO,SAACjE,GAAD,IAAOuC,EAAP,uDAAmB,QAAnB,OAC3BvC,EAAKW,KAAI,SAACC,GAAD,OACP,kBAACsD,EAAA,EAAD,CACEL,OAAQ,CAACjD,EAAQuD,YAAYC,IAAKxD,EAAQuD,YAAYE,MACtD/E,MAAOE,EAAgB+C,GAAW9C,IAClC6E,UAAW9E,EAAgB+C,GAAW9C,IACtC8E,YAAa,GACbrD,OACEsD,KAAKC,KAAK7D,EAAQ2B,IAAc/C,EAAgB+C,GAAW3C,YAG7D,kBAAC8E,EAAA,EAAD,KACE,yBAAKvF,UAAU,kBACb,yBACEA,UAAU,YACVwF,MAAO,CAAEC,gBAAgB,OAAD,OAAShE,EAAQuD,YAAYU,KAA7B,QAE1B,yBAAK1F,UAAU,aAAayB,EAAQA,SACpC,yBAAKzB,UAAU,kBAAf,UACUoB,IAAQK,EAAQlC,OAAO8B,OAAO,QAExC,yBAAKrB,UAAU,kBAAf,cACcoB,IAAQK,EAAQf,WAAWW,OAAO,QAEhD,yBAAKrB,UAAU,eAAf,WACWoB,IAAQK,EAAQd,QAAQU,OAAO,cGpD3CsE,CAAcpE,EAAW6B,M,OC2HnBwC,MAtHf,WAAgB,IAAD,EACsB/B,mBAAS,aAD/B,mBACNpC,EADM,KACGoE,EADH,OAEyBhC,mBAAS,IAFlC,mBAENmB,EAFM,KAEOc,EAFP,OAGqBjC,mBAAS,IAH9B,mBAGNtC,EAHM,KAGKwE,EAHL,OAIqBlC,mBAAS,SAJ9B,mBAINT,EAJM,KAIK4C,EAJL,OAKqBnC,mBAAS,IAL9B,mBAKNoC,EALM,KAKKC,EALL,OAM2BrC,mBAAS,IANpC,mBAMNsC,EANM,KAMQC,EANR,OAOqBvC,mBAAS,CAAEoB,IAAK,SAAUoB,KAAM,UAPrD,mBAONC,EAPM,KAOKC,EAPL,OAQiB1C,mBAAS,GAR1B,mBAQN2C,EARM,KAQGC,EARH,KAWb1C,qBAAU,WACRC,MAAM,sCACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACpD,GACLiF,EAAejF,QAElB,IAEHkD,qBAAU,YACc,uCAAG,sBAAA/C,EAAA,sDACvBgD,MAAM,4CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACpD,GACL,IAAMU,EAAYV,EAAKW,KAAI,SAACC,GAAD,MAAc,CACvCiF,KAAMjF,EAAQA,QACdc,MAAOd,EAAQuD,YAAY2B,SAEzB7F,EAAaF,EAASC,GAC1BkF,EAAaxE,GACb6E,EAAgBvF,GAChBqF,EAAapF,MAXM,2CAAH,qDAetB8F,KACC,IAEH,IAAMC,EAAe,uCAAG,WAAOC,GAAP,iBAAA9F,EAAA,6DAChB+F,EAAcD,EAAEE,OAAOzE,MAEvBsC,EACY,cAAhBkC,EACI,qCADJ,mDAEgDA,GAN5B,SAOhB/C,MAAMa,GACTZ,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACpD,GACLgF,EAAgBkB,GAChBjB,EAAejF,GACf0F,EAAa,CAAC1F,EAAKmE,YAAYC,IAAKpE,EAAKmE,YAAYE,OACrDuB,EAAW,MAbO,2CAAH,sDAgBrB,OACE,yBAAKzG,UAAU,OACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,eACb,gDACA,kBAACiH,EAAA,EAAD,CAAajH,UAAU,iBACrB,kBAACkH,EAAA,EAAD,CACEC,QAAQ,WACR5E,MAAOd,EACP2F,SAAUP,GAEV,kBAACQ,EAAA,EAAD,CAAU9E,MAAM,aAAhB,aACChB,EAAUC,KAAI,SAACC,GAAD,OACb,kBAAC4F,EAAA,EAAD,CAAU9E,MAAOd,EAAQc,OAAQd,EAAQiF,YAKjD,yBAAK1G,UAAU,cACf,kBAAC,EAAD,CACID,QAAS,SAAC+G,GAAD,OAAOd,EAAa,UAC7B1G,MAAM,oBACNI,OAAK,EACLD,OAAsB,UAAd2D,EACR7D,MAAO2B,EAAgB8D,EAAYsC,YACnC9H,MAAO4B,IAAQ4D,EAAYzF,OAAO8B,OAAO,UAE3C,kBAAC,EAAD,CACEtB,QAAS,SAAC+G,GAAD,OAAOd,EAAa,cAC7B1G,MAAM,YACNG,OAAsB,cAAd2D,EACR7D,MAAO2B,EAAgB8D,EAAYuC,gBACnC/H,MAAO4B,IAAQ4D,EAAYtE,WAAWW,OAAO,UAE/C,kBAAC,EAAD,CACEtB,QAAS,SAAC+G,GAAD,OAAOd,EAAa,WAC7B1G,MAAM,SACNI,OAAK,EACLD,OAAsB,WAAd2D,EACR7D,MAAO2B,EAAgB8D,EAAYwC,aACnChI,MAAO4B,IAAQ4D,EAAYrE,QAAQU,OAAO,WAG9C,kBAAC,EAAD,CACEE,UAAW4E,EACX/C,UAAWA,EACXsB,OAAQ4B,EACR3B,KAAM6B,KAGV,kBAAC1G,EAAA,EAAD,CAAME,UAAU,cAChB,kBAACC,EAAA,EAAD,KACI,yBAAKD,UAAU,oBACb,qDACA,kBAAC,EAAD,CAAOuB,UAAW0E,IAClB,6CAAmB7C,GACnB,kBAAC,EAAD,CAAWA,UAAWA,SC1HlCqE,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.da4795c2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport \"./InfoBox.css\";\r\n\r\nfunction InfoBox({ title, cases, total, active, isRed, ...props }) {\r\n  console.log(title, active);\r\n  return (\r\n    <Card\r\n      onClick={props.onClick}\r\n      className={`infoBox ${active && \"infoBox--selected\"} ${\r\n        isRed && \"infoBox--red\"\r\n      }`}\r\n    >\r\n      <CardContent>\r\n        <Typography color=\"textSecondary\" gutterBottom>\r\n          {title}\r\n        </Typography>\r\n        <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\r\n          {cases}\r\n        </h2>\r\n\r\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n          {total} Total\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default InfoBox;","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    rgb: \"rgb(204, 16, 52)\",\r\n    half_op: \"rgba(204, 16, 52, 0.5)\",\r\n    multiplier: 800,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    rgb: \"rgb(125, 215, 29)\",\r\n    half_op: \"rgba(125, 215, 29, 0.5)\",\r\n    multiplier: 1200,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    rgb: \"rgb(251, 68, 67)\",\r\n    half_op: \"rgba(251, 68, 67, 0.5)\",\r\n    multiplier: 2000,\r\n  },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n  let sortedData = [...data];\r\n  sortedData.sort((a, b) => {\r\n    if (a.cases > b.cases) {\r\n      return -1;\r\n    } else {\r\n      return 1;\r\n    }\r\n  });\r\n  return sortedData;\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      fillOpacity={0.4}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));","import React from \"react\";\r\nimport \"./Table.css\";\r\nimport numeral from \"numeral\";\r\n\r\nfunction Table({ countries }) {\r\n  return (\r\n    <div className=\"table\">\r\n      {countries.map((country) => (\r\n        <tr>\r\n          <td>{country.country}</td>\r\n          <td>\r\n            <strong>{numeral(country.cases).format(\"0,0\")}</strong>\r\n          </td>\r\n        </tr>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType }) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n          console.log(chartData);\r\n          // buildChart(chartData);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;","import React from \"react\";\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport \"./Map.css\";\r\nimport { showDataOnMap } from \"./util\";\r\n\r\nfunction Map({ countries, casesType, center, zoom }) {\r\n  return (\r\n    <div className=\"map\">\r\n      <LeafletMap center={center} zoom={zoom}>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n        {showDataOnMap(countries, casesType)}\r\n      </LeafletMap>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;","import \"./App.css\";\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport InfoBox from \"./InfoBox\";\nimport { sortData, prettyPrintStat } from \"./util\";\nimport Table from \"./Table\";\nimport LineGraph from \"./LineGraph\";\nimport numeral from \"numeral\";\nimport Map from \"./Map\";\nimport \"leaflet/dist/leaflet.css\";\nfunction App() {\n  const [country, setInputCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [countries, setCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [tableData, setTableData] = useState([]);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n          let sortedData = sortData(data);\n          setCountries(countries);\n          setMapCountries(data);\n          setTableData(sortedData);\n        });\n    };\n\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value;\n\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setInputCountry(countryCode);\n        setCountryInfo(data);\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n      });\n  };\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 Tracker</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              value={country}\n              onChange={onCountryChange}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app__stats\">\n        <InfoBox\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Coronavirus Cases\"\n            isRed\n            active={casesType === \"cases\"}\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={numeral(countryInfo.cases).format(\"0.0a\")}\n          />\n          <InfoBox\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            active={casesType === \"recovered\"}\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={numeral(countryInfo.recovered).format(\"0.0a\")}\n          />\n          <InfoBox\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            isRed\n            active={casesType === \"deaths\"}\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={numeral(countryInfo.deaths).format(\"0.0a\")}\n          />\n        </div>\n        <Map\n          countries={mapCountries}\n          casesType={casesType}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n      <Card className=\"app__right\">\n      <CardContent>\n          <div className=\"app__information\">\n            <h3>Live Cases by Country</h3>\n            <Table countries={tableData} />\n            <h3>Worldwide new {casesType}</h3>\n            <LineGraph casesType={casesType} />\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}